// class Heartbeat

// Automatically generated by mkmsgs - DO NOT EDIT
// Description: Heartbeat
#include "../n2k.h"
namespace n2k {
  class Heartbeat : public Message {
  public:
    enum class Controller1State:unsigned char {
      Error_Active = 0,
      Error_Passive = 1,
      Bus_Off = 2,
      Not_Available = 3
    };

    enum class Controller2State:unsigned char {
      Error_Active = 0,
      Error_Passive = 1,
      Bus_Off = 2,
      Not_Available = 3
    };

    enum class EquipmentStatus:unsigned char {
      Operational = 0,
      Fault = 1,
      Reserved = 2,
      Not_Available = 3
    };

    Heartbeat() {};
    Heartbeat(const Message &m) : Message(m) {};
    void setDataTransmitOffset(double value) { Set(value/0.001,0,16); }
    double getDataTransmitOffset() const { return 0.001 * Get(0,16); };
    void setSequenceCounter(unsigned char value) { Set(value,16,8); }
    unsigned char getSequenceCounter() const { return Get(16,8); };
    void setController1State(Controller1State value) { Set((unsigned char)value,24,2); }
    Controller1State getController1State() const { return (Controller1State)Get(24,2); };
    void setController2State(Controller2State value) { Set((unsigned char)value,26,2); }
    Controller2State getController2State() const { return (Controller2State)Get(26,2); };
    void setEquipmentStatus(EquipmentStatus value) { Set((unsigned char)value,28,2); }
    EquipmentStatus getEquipmentStatus() const { return (EquipmentStatus)Get(28,2); };
    static const pgn_t PGN = 126993;
    static const PGNType Type = PGNType::Single;
    pgn_t getPGN() const { return PGN; }
  };
}
