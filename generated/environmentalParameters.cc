// class EnvironmentalParameters

// Automatically generated by mkmsgs - DO NOT EDIT
// Description: Environmental Parameters
#include "../n2k.h"
namespace n2k {
  class EnvironmentalParameters : public Message {
  public:
    enum class TemperatureSource:unsigned char {
      Sea_Temperature = 0,
      Outside_Temperature = 1,
      Inside_Temperature = 2,
      Engine_Room_Temperature = 3,
      Main_Cabin_Temperature = 4,
      Live_Well_Temperature = 5,
      Bait_Well_Temperature = 6,
      Refrigeration_Temperature = 7,
      Heating_System_Temperature = 8,
      Dew_Point_Temperature = 9,
      Apparent_Wind_Chill_Temperature = 10,
      Theoretical_Wind_Chill_Temperature = 11,
      Heat_Index_Temperature = 12,
      Freezer_Temperature = 13,
      Exhaust_Gas_Temperature = 14
    };

    enum class HumiditySource:unsigned char {
      Inside = 0,
      Outside = 1
    };

    EnvironmentalParameters() {};
    EnvironmentalParameters(const Message &m) : Message(m) {};
    void setSid(unsigned char value) { Set(value,0,8); }
    unsigned char getSid() const { return Get(0,8); };
    void setTemperatureSource(TemperatureSource value) { Set((unsigned char)value,8,6); }
    TemperatureSource getTemperatureSource() const { return (TemperatureSource)Get(8,6); };
    void setHumiditySource(HumiditySource value) { Set((unsigned char)value,14,2); }
    HumiditySource getHumiditySource() const { return (HumiditySource)Get(14,2); };
    void setTemperature(double value) { Set(value/0.01,16,16); }
    double getTemperature() const { return 0.01 * Get(16,16); };
    void setHumidity(double value) { Set(value/0.004,32,16); }
    double getHumidity() const { return 0.004 * Get(32,16); };
    void setAtmosphericPressure(unsigned short value) { Set(value,48,16); }
    unsigned short getAtmosphericPressure() const { return Get(48,16); };
    static const pgn_t PGN = 130311;
    static const PGNType Type = PGNType::Single;
    pgn_t getPGN() const { return PGN; }
  };
}
