// Generate classes from PGNs
// We currently only generate a few of them
#include <sys/stat.h>

#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <regex>
#include <cctype>

#include "framework/json.hpp"
#include "framework/inja.hpp"

using json = nlohmann::json;
using namespace std;
using namespace inja;

// This is the template that is filled in from the JSON input file.
// The JSON file describes each field in detail.
const char *tstr = R"TEMPLATE(// class {{ Id }}

// Automatically generated by mkmsgs - DO NOT EDIT
// Description: {{ Description }}
#include "../n2k.h"
namespace n2k {
  class {{ Id }} : public Message {
  public:
    {{ Id }}(const Message &m) : Message(m) {};
## if isArray(Fields)
##  for field in Fields
##   if field.Id != "reserved"
    {{ funcfor(field) }};
##    if existsIn(field, "EnumValues")
    enum {
##     for v in field.EnumValues
        {{ enumname(v.name) }} = {{ v.value }}{% if not loop.is_last %},{% endif %}
##     endfor
    };
##    endif
##   endif
##  endfor
## else
    {{ funcfor(Fields.Field) }};
## endif
    static const pgn_t PGN = {{ PGN }};
    static const PGNType Type = PGNType::{{ Type }};
    pgn_t getPGN() { return PGN; }
  };
}
)TEMPLATE";

int main(int argc, char *argv[]) {
    // Parse the pgns.json file
    json j;
    ifstream pgnfile("pgns.json");
    pgnfile >> j;

    mkdir("generated", 0777);
    int needed[] = { 
		     // required for transmission
		     59392, /* iso ack */
	    	     59904, /* iso req */
		     60160, /* multi packet data transfer TP.DT */
		     60416, /* multi packet conn mgmt TP.CM */
		     60928, /* iso address claim */
		     126208, /* group function */
		     126464, /* PGN list */
		     126993, /* Heartbeat */
		     126996, /* product information */
		     126998, /* config information */

		     // user (these should be in argv)

		     130306, /* environmental parameters */
		     130310, /* environmental parameters */
		     130311, /* environmental parameters */
		     130312, /* temperature */
		     130316 /* temperatureExtendedRange */
    };


    json pgns = j["PGNs"];
    Environment env;
    env.add_callback("funcfor", 1, [](Arguments& args) {
	    auto field = args.at(0);
	    int len = field->at("BitLength").get<int>();
	    int off = -1;
	    if (field->contains("BitOffset")) {
	        off = field->at("BitOffset").get<int>();
	    }
	    string id = field->at("Id").get<string>();
	    id[0] = toupper(id[0]);
	    string getter = "Get(" + to_string(off) + "," + to_string(len) + ")";
	    if (field->contains("Resolution")) {
	        auto factor = 1.0;
	        auto res = field->at("Resolution");
		if (field->contains("Units")) {
		   auto units = field->at("Units").get<string>();
		   if (units == "rad") {
		       factor = 180/M_PI;
		   } else if (units == "m/s") {
		       factor = 1.94384;
		   }
	        }
		auto resDouble = res.get<double>();
		string res_string = to_string(factor * resDouble);
			
	    	return "double get" + id + "() { return " + res_string + " * " + getter + "; }";
	    }
	    string type;
	    if (len <= 8)
	    	type = "unsigned char";
	    else if (len <=16)
	        type ="unsigned short";
	    else if (len < 32)
		    type = "unsigned long";
	    else
		type = "";
	    return string(type + " get" + id + "() { return " + getter + "; }");
    });
    env.add_callback("enumname", 1, [](Arguments& args) {
	    regex e ("[^A-Za-z0-9]+");
	    string orig = args.at(0)->get<string>();
	    return regex_replace(orig, e, "_");
	    });
    Template temp = env.parse(tstr);
    for (json::iterator it = pgns.begin(); it != pgns.end(); ++it) {
	    auto pgnid = (*it)["PGN"].get<int>();
	    cout << "Processing PGN " << pgnid << "\n";
	    if (binary_search(needed, needed + sizeof(needed) / sizeof(int), pgnid)) {
		    string classname = (*it)["Id"].get<string>();
		    string filename = "generated/" + classname + ".cc";
		    ofstream classfile(filename);
		    classname[0] = toupper(classname[0]);
		    (*it)["Id"] = classname;
		    env.render_to(classfile, temp, *it);
		    classfile.close();
	    }
    }
}
